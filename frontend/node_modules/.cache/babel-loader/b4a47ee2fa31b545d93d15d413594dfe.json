{"ast":null,"code":"import _asyncToGenerator from\"C:/SSAFY/WORKSPACE/NFT/S06P22A106/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\SSAFY\\\\WORKSPACE\\\\NFT\\\\S06P22A106\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import Web3 from'web3';import Tx from'ethereumjs-tx';// Web3\nvar web3=new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_ETHEREUM_RPC_URL));/**\r\n * 트랜잭션 전송을 위한 공통 로직을 아래에 구현합니다. \r\n * 전달받은 개인키로 서명한 트랜잭션을 전송합니다. \r\n * @param {*} fromAddr 보내는 주소\r\n * @param {*} privKey 보내는 주소의 개인키\r\n * @param {*} toAddr 받는 주소\r\n * @param {*} data 입력 데이터\r\n * @returns 트랜잭션의 결과 \r\n */export default function sendTransaction(_x,_x2,_x3,_x4){return _sendTransaction.apply(this,arguments);}function _sendTransaction(){_sendTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromAddr,privKey,toAddr,data){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{// TODO\n}catch(e){console.log(e);}case 1:case\"end\":return _context.stop();}}},_callee);}));return _sendTransaction.apply(this,arguments);}","map":{"version":3,"sources":["C:/SSAFY/WORKSPACE/NFT/S06P22A106/frontend/src/utils/TxSender.js"],"names":["Web3","Tx","web3","providers","HttpProvider","process","env","REACT_APP_ETHEREUM_RPC_URL","sendTransaction","fromAddr","privKey","toAddr","data","e","console","log"],"mappings":"6QAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,EAAP,KAAe,eAAf,CAEA;AACA,GAAMC,CAAAA,IAAI,CAAG,GAAIF,CAAAA,IAAJ,CAAS,GAAIA,CAAAA,IAAI,CAACG,SAAL,CAAeC,YAAnB,CAAgCC,OAAO,CAACC,GAAR,CAAYC,0BAA5C,CAAT,CAAb,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,uBAA8BC,CAAAA,eAA9B,gE,qGAAe,iBAA+BC,QAA/B,CAAyCC,OAAzC,CAAkDC,MAAlD,CAA0DC,IAA1D,kHACb,GAAI,CACF;AACD,CAAC,MAAOC,CAAP,CAAU,CACVC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CALY,sD","sourcesContent":["import Web3 from 'web3';\r\nimport Tx from 'ethereumjs-tx';\r\n\r\n// Web3\r\nconst web3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_ETHEREUM_RPC_URL));\r\n\r\n/**\r\n * 트랜잭션 전송을 위한 공통 로직을 아래에 구현합니다. \r\n * 전달받은 개인키로 서명한 트랜잭션을 전송합니다. \r\n * @param {*} fromAddr 보내는 주소\r\n * @param {*} privKey 보내는 주소의 개인키\r\n * @param {*} toAddr 받는 주소\r\n * @param {*} data 입력 데이터\r\n * @returns 트랜잭션의 결과 \r\n */\r\nexport default async function sendTransaction(fromAddr, privKey, toAddr, data) {\r\n  try {\r\n    // TODO\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}